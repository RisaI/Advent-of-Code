{
	// Place your aoc24 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Main with anyhow": {
		"scope": "rust",
		"prefix": "anyhow_main",
		"body": [
			"fn main() -> anyhow::Result<()> {",
			"\t$0",
			"",
			"\tOk(())",
			"}"
		]
	},
	"Read whole data": {
		"scope": "rust",
		"prefix": "read_to_string",
		"body": [
			"let data = std::fs::read_to_string(\"data.txt\")?;"
		]
	},
	"Read data line by line": {
		"scope": "rust",
		"prefix": "read_per_line",
		"body": [
			"let reader = BufReader::new(File::open(\"data.txt\")?);",
			"",
			"for line in reader.lines() {",
			"\tlet line = line?;",
			"",
			"\tif line.is_empty() {",
			"\t\tcontinue;",
			"\t}",
			"",
			"\t$0",
			"}"
		]
	},
	"Read data by folding": {
		"scope": "rust",
		"prefix": "read_by_folding",
		"body": [
			"let data = BufReader::new(File::open(\"data.txt\")?)",
			"\t.lines()",
			"\t.try_fold($1, |mut state, line| -> anyhow::Result<_> {",
			"\t\tlet line = line?;",
			"",
			"\t\t$0",
			"",
			"\t\tOk(state)",
			"\t})?;",
		]
	},
	"Elapsed time": {
		"scope": "rust",
		"prefix": "elapsed_time",
		"body": [
			"let start = std::time::Instant::now();",
			"",
			"$0",
			"",
			"let elapsed = start.elapsed();",
			"println!(\"took {}us\", elapsed.as_micros());"
		]
	}
}